import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.Bt9cqVig.js";const e="/Blog/assets/image-20230808112338977.CwNMtHIu.png",p="/Blog/assets/image-20230808135712403.DcwD1or_.png",l="/Blog/assets/image-20230808135733090.Dw0wnx2I.png",t="/Blog/assets/image-20230808135743035.BZdmZ1Ld.png",h="/Blog/assets/image-20230808135757816.CTNDtz4i.png",r="/Blog/assets/image-20230808094142364.DedLAcbN.png",k="/Blog/assets/image-20230808095116779.BiyGc-_T.png",B=JSON.parse('{"title":"csdn某笔记","description":"","frontmatter":{},"headers":[],"relativePath":"QT/QT基础/QSS笔记.md","filePath":"QT/QT基础/QSS笔记.md"}'),d={name:"QT/QT基础/QSS笔记.md"},o=n('<h1 id="csdn某笔记" tabindex="-1">csdn某笔记 <a class="header-anchor" href="#csdn某笔记" aria-label="Permalink to &quot;csdn某笔记&quot;">​</a></h1><h3 id="什么是qss" tabindex="-1">什么是QSS <a class="header-anchor" href="#什么是qss" aria-label="Permalink to &quot;什么是QSS&quot;">​</a></h3><p>QSS称为Qt Style Sheets也就是Qt<a href="https://so.csdn.net/so/search?q=%E6%A0%B7%E5%BC%8F%E8%A1%A8&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">样式表</a>，它是Qt提供的一种用来自定义控件外观的机制。QSS大量参考了CSS的内容，只不过QSS的功能比CSS要弱很多，体现在选择器要少，可以使用的QSS属性也要少很多，并且并不是所有的属性都可以用在Qt的所有控件上。</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss在qt程序中的使用办法" tabindex="-1">QSS在Qt程序中的使用办法 <a class="header-anchor" href="#qss在qt程序中的使用办法" aria-label="Permalink to &quot;QSS在Qt程序中的使用办法&quot;">​</a></h3><p>首先将QSS写在文件中，然后利用如下的代码设置QSS：</p><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QWidget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent) :</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     QWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parent),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Ui</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::MainWidget)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">　　 //应用样式 apply the qss style</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     QFile </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:/qss/main.qss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ReadOnly);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     QTextStream </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filetext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     QString stylesheet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filetext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStyleSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stylesheet);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  　　file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>该段代码写在ui界面的后台cpp文件的构造函数中,主要是this-&gt;setStyleSheet()函数的设置功能，要说明的是该函数除了可以对整个当前构造数所在的那个类所表示的ui进行整体应用样式以外，setStyleSheet()函数本身是QWidget的成员函数，几乎Qt中的大多数控件都可以直接使用该函数分别设置自己的样式。</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss的语法规则" tabindex="-1">QSS的语法规则 <a class="header-anchor" href="#qss的语法规则" aria-label="Permalink to &quot;QSS的语法规则&quot;">​</a></h3><p>QSS的语法规则几乎与CSS相同。一条QSS的样式是由两部分组成的，一部分是<a href="https://so.csdn.net/so/search?q=%E9%80%89%E6%8B%A9%E5%99%A8&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">选择器</a>指定了哪些控件会受到影响，另一部分是指定了属性的值，表示这些控件的哪些属性会受到影响。例如：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QPushButton { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>QPushButton表示选择器，指定了所有的QPushButton或者是QPushButton的子类会受到影响，注意凡是继承自QPushButton的子类也会受到影响，这是与CSS中不同的地方，因为CSS应用的都是一些标签，没有类的层次结构，更加没有子类的概念。而后面的{color:red}则是规则的定义，表明指定前景颜色是红色。整个意思就是设置QPushButton类以及其子类的所有实例的前景色是红色。</p><p>如果MyButton继承自QPushButton，那么上面的规则也会应用到所有MyButton控件上，但是如果规则是如下的：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MyButton{color:red}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>则只会对MyButton的实例应用红色的前景颜色，而对QPushButton的实例没有应用。</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss的选择器类型" tabindex="-1">QSS的选择器类型 <a class="header-anchor" href="#qss的选择器类型" aria-label="Permalink to &quot;QSS的选择器类型&quot;">​</a></h3><p>1.通配选择器：* ; 匹配所有的控件 2.类型选择器：QPushButton ; 匹配所有QPushButton和其子类的实例 3.属性选择器：QPushButton[flat=&quot;false&quot;]; 匹配所有flat属性是false的QPushButton实例，注意该属性可以是自定义的属性，不一定非要是类本身具有的属性 4.类选择器： .QPushButton ; 匹配所有QPushButton的实例，但是并不匹配其子类。这是与CSS中的类选择器不一样的地方，注意前面有一个点号 5.ID选择器： #myButton; 匹配所有id为myButton的控件实例，这里的id实际上就是objectName指定的值 6.后代选择器： QDialog QPushButton ; 所有QDialog容器中包含的QPushButton，不管是直接的还是间接的 7.子选择器： QDialog &gt; QPushButton; 所有QDialog容器下面的QPushButton，其中要求QPushButton的直接父容器是QDialog</p><p>另外上面所有的这些选择器可以联合使用，并且支持一次设置多个选择器类型，用逗号隔开，这点与CSS一样，例如#frameCut,#frameInterrupt,#frameJoin 表示所有这些id使用一个规则。#mytable QPushButton 表示选择所有id为mytable的容器下面的QPushButton实例</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss子控件" tabindex="-1">QSS子控件 <a class="header-anchor" href="#qss子控件" aria-label="Permalink to &quot;QSS子控件&quot;">​</a></h3><p>QSS的子控件实际上也是选择器的一种，因为这种选择器与CSS有一些不同，所以单独拿出来说，QSS的子控件选择器是应用在一些复合控件上的，典型的例如QComboBox，该控件的外观包含几个部分，一般情况下有一个矩形的外边框，右边有一个向下的箭头用于提示点击之后会有弹出下拉列表。例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QComboBox::drop-down { image: url(dropdown.png) }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的样式指定所有QComboBox的下拉箭头的图片为自定义的图片dropdown.png ::dropdown子控件选择器也可以与上面提到的选择器一起联合使用：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QComboBox#myQComboBox::drop-down { image: url(dropdown.png) }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>指定id名为myQComboBox的QComboBox控件的下拉箭头的自定义图片，要注意的是子控件选择器实际上是选择复合控件中的一部分，也就是说对复合控件中的一部分应用样式，例如为QComboBox的下拉箭头指定图片，而不是为QComboBox本身指定图片。</p><p>QSS为很多复杂的复合控件提供了子控件的定义，以方便对这些复合控件的各个部分进行样式设置。限于篇幅，本文也不能将这些可用的子控件都列出来，在安装QtCreator之后自带的帮助中就有很详细的描述。</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss伪状态" tabindex="-1">QSS伪状态 <a class="header-anchor" href="#qss伪状态" aria-label="Permalink to &quot;QSS伪状态&quot;">​</a></h3><p>QSS的伪状态选择器实际上与CSS中的类似，是以冒号开头的一个选择表达式，例如:hover表示当鼠标经过时候的状态。他限制了当控件在某一种状态下的时候才能应用QSS规则，伪状态只能描述一个控件的状态，或者是一个复合控件中的子控件的状态，所以该伪状态选择器只能放在选择器的最后面，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QComboBox:hover{background-color:red;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该规则表示当鼠标经过QComboBox上面的时候，其背景颜色指定为红色，该伪状态 :hover描述的是QComboBox的状态。 伪状态除了描述选择器选择的控件以外，还可以描述子控件选择器所选择的复合控件中的子控件的状态，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QComboBox::drop-down:hover{background-color:red;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>表示当鼠标经过QComboBox的下拉箭头的时候，该下拉箭头的背景颜色变成红色。 此外伪状态可以用一个感叹号表示否，例如:hover表示鼠标经过，而:!hover表示鼠标没有经过的状态。几个伪状态可以同时一起使用，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QCheckBox:hover:checked { color: white }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>指定一个当鼠标经过一个选中的QCheckBox的时候，设置其文字的前景颜色为白色。 QSS提供了很多的伪状态，一些伪状态只能用在特定的控件上，具体有哪些伪状态，在Qt的帮助里面有详细的列表，限于篇幅这里也不列出了。</p><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss级联与冲突" tabindex="-1">QSS级联与冲突 <a class="header-anchor" href="#qss级联与冲突" aria-label="Permalink to &quot;QSS级联与冲突&quot;">​</a></h3><p>QSS中的级联包含几个方面的概念，一个是当在同一个控件上应用两个不同的规则，那么应该应用哪一个规则的问题，也就是如何解决这种冲突。二个是在一个容器控件上设置的QSS规则会对容器里面的控件产生效果(这要取决于容器控件上设置的QSS规则是什么样的规则，如果容器控件上设置的QSS规则仅仅针对容器控件本身则该规则对子控件没有影响，如果该QSS规则里面有对子控件的设置，则自然会对子控件产生效果)，级联问题是解决当一个控件被层层父容器包裹，并且在每一层的父容器上都有对该控件的样式设置的时候，该控件的最终效果是合并这些父容器上的QSS效果。</p><p>冲突问题：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton#okButton { color: gray }``QPushButton { color: red }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这两条规则都会应用到名为okButton的按钮上，但是他们为同一个属性设置了不同的颜色，这会有冲突，那么要解决这样的冲突就必须考虑到选择器的特异性(这个词怎么理解，我理解为这个特异性为更加特殊，实际上CSS上用权重表示这里的特异性)，显然QPushButton#okButton仅仅针对对象名为okButton的控件有效果，而QPushButton却对所有的QPushButton的实例或者是其子类的实例有效果，显然QPushButton#okButton选择器更加特殊，也就是更具有特异性。所以最终okButton前景色被应用为灰色。如果两条规则的特异性一样，那么就选择放在后面的那一条。</p><p>另外如果一个选择器应用了伪状态，而另一个没有，那么应用了伪状态的选择器要更加特殊，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton:hover { color: white }``QPushButton { color: red }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>显然QPushButton:hover比单纯的QPushButton更加具有特异性。这两条规则表示当鼠标放在按钮上的时候文字是白色，其他情况下都是红色。 如下面两个规则的特异性是一样的，那么应该是如何应用呢：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton:hover { color: white } ` `//如果鼠标经过则前景白色``QPushButton:enabled { color: red } ` `//如果按钮是enabled状态则前景红色</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以默认情况下前景文字是红色的，当鼠标经过的时候并不会变成白色，因为他们的特异性是一样的，所以选择后面的，也就是红色。 那么换一下顺序会怎样呢：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton:enabled { color: red } ` `//如果按钮是enabled状态则前景红色``QPushButton:hover { color: white } ` `//如果鼠标经过则前景白色</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当鼠标经过的时候，就变成白色的了，因为他们的特异性一样，所以选择后面的规则，也就是鼠标经过前景变成白色。 如果把其中的一条的特异性增加，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton:hover:enabled { color: white }``QPushButton:enabled { color: red }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么第一条的特异性比第二条大，所以应用第一条的规则。 另外一种特异性发生在类型选择器上：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton { color: red }  ` `//应用在所有的QPushButton上``QAbstractButton { color: gray } ` `//应用在所有的QAbstractButton上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而在类的继承结构上，QAbstractButton是QPushButton的父类，显然QPushButton更加具有特异性，所以QPushButton的前景颜色被应用为红色，而不是灰色。有没有一个办法来确定两条QSS规则的特异性大小呢，其实QSS使用的特异性的计算方法与CSS是一样的，详细可以参考CSS2的文档规范，这里还是简要的说明一下，特异性这个东西在CSS中一般被称为权重，权重越大的越优先使用，CSS的计算规则如下：</p><p>1.计算一条规则中id选择器的个数，假设存放在变量a中 2.计算一条规则中类选择器和属性选择器的个数，存放在变量b中 3.计算一条规则中的类型选择器的个数，存放在变量c中 4.忽略伪元素，对应QSS中的子控件</p><p>下面是具体的计算方法：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>*       {} ` `/* a=0 b=0 c=0 -&gt; specificity =  0 */``LI      {} ` `/* a=0 b=0 c=1 -&gt; specificity =  1 */``UL LI     {} ` `/* a=0 b=0 c=2 -&gt; specificity =  2 */``UL OL+LI   {} ` `/* a=0 b=0 c=3 -&gt; specificity =  3 */``H1 + *[REL=up] {} ` `/* a=0 b=1 c=1 -&gt; specificity = 11 */``UL OL LI.red  {} ` `/* a=0 b=1 c=3 -&gt; specificity = 13 */``LI.red.level  {} ` `/* a=0 b=2 c=1 -&gt; specificity = 21 */``#x34y    {} /* a=1 b=0 c=0 -&gt; specificity = 100 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的计算规则是CSS的计算规则，同样可以应用的QSS上。</p><p>关于级联：</p><p>QSS可以设置在QApplication上，也可以设置在一个部件的容器部件上，也可以设置在子孙部件上，一个部件最终使用的样式效果是合并了他的所有父容器，祖父容器等上面设置的所有样式的结果，这些设置会进行叠加。如果在级联过程中发生了冲突，例如部件本身指定的前景颜色为绿色，而其父亲容器为其指定的前景颜色为红色，此时就选择部件本身设置的样式效果。例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>qApplication-&gt;setStyleSheet(` `&quot;QPushButton { color: white }&quot;` `);``myPushButton-&gt;setStyleSheet(` `&quot;* { color: blue }&quot;` `);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第一条语句表示在QApplication上设置QPushButton的样式，而第二条语句表示在myPushButton对象上设置样式。最终结果会将myPushButton的前景颜色设置为蓝色。级联效果主要应用在当一个控件的样式在多个容器控件上都有设置的时候，该控件的最终效果是这些所有容器控件上效果的合并。级联规则在CSS中本身也是一个复杂的主题，如果大家感兴趣，还是需要自己参考CSS2的规范文档，本节仅仅是抛装引玉。</p><p>另外一个要提到的是，QSS中似乎为父容器控件本身设置的样式，并不会被子控件继承，例如如果QFrame中有一个QPushButton控件，那么如下的语句：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui-&gt;frame-&gt;setStyleSheet(` `&quot;QFrame{ color: red; border:1px solid red }&quot;` `);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该语句仅仅为QFrame设置前景颜色以及边框的效果并不会应用到其里面的QPushButton上，如果是下面的语句则都可以：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui-&gt;frame-&gt;setStyleSheet(` `&quot;QPushButton{ color: red; border:1px solid red }&quot;` `);``ui-&gt;frame-&gt;setStyleSheet(` `&quot;*{ color: red; border:1px solid red }&quot;` `);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://www.cnblogs.com/wangqiguo/p/4960776.html#_labelTop" target="_blank" rel="noreferrer">回到顶部</a></p><h3 id="qss实际应用中要注意的地方" tabindex="-1">QSS实际应用中要注意的地方 <a class="header-anchor" href="#qss实际应用中要注意的地方" aria-label="Permalink to &quot;QSS实际应用中要注意的地方&quot;">​</a></h3><p>在使用QSS的时候遇到过一些坑，看似简单，但是如果不知道的话，还是很折磨人的： &lt;1&gt;使用QSS设置边框无效，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>border:1px solid red; ` `//Ok``border:solid 1px red; ` `//Error``border:red 1px solid; ` `//Error``border:red solid 1px; ` `//Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置边框颜色和像素的时候，必须是第一种顺序，而CSS中是无所谓的，至于原因，我也不清楚，就是这么坑人。</p><p>&lt;2&gt; QSS设置宽高无效： 在QSS中设置宽高必须要使用 min-width和min-height，max-width，max-height来设置，用width和height设置是没有任何效果的。</p><p>&lt;3&gt;QComboBox的样式设置的问题： QcomboBox是一个复杂的控件，QComboBox由3部分组成，一个是QComboBox的外框，里面有一个下拉按钮，这个按钮可以通过QComboBox::drop-down 来控制其位置，将其定义到QComboBox的左边而不一定是右边。另外在这个下拉按钮上面一般会有一个向下的箭头，这个箭头图像也是可以定制的，通过QComboBox::down-arrow来指定箭头的图像。</p><p>如果要控制QComboBox的弹出下拉列表的样式需要通过：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QComboBox QAbstractItemView {`` ` `//设置当点击下拉按钮之后弹出的下拉列表的样式，要注意的是这里的样式`` ` `//仅仅只能设置弹出的整个下拉列表范围的矩形的样式，不能设置下拉列表`` ` `//中的每一个下拉项的样式，例如不能设置每一个下拉项高度``}``QcomboBox{`` ` `//设置未弹出下拉列表的样式``}` `QComboBox QAbstractItemView::item {``//设置弹出下拉列表中的每一个下拉项的样式，这里的样式要想生效，必须先``//对QcomboBox做下面的设置``//QStyledItemDele</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h1><p>QSS选择器用于指定应该应用样式的Qt部件或控件。下面是一些关于QSS选择器的常见知识：</p><ol><li>类选择器（Class Selector）：使用控件的类名作为选择器，类名以小写字母&quot;Q&quot;开头。例如，如果你想为所有QPushButton应用样式，可以使用类选择器&quot;QPushButton&quot;：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QPushButton {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>ID选择器（ID Selector）：使用控件的objectName作为选择器。objectName应在代码中设置，通常使用<code>setObjectName</code>方法来指定。例如，如果你想为objectName为&quot;myButton&quot;的QPushButton应用样式，可以使用ID选择器&quot;#myButton&quot;：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#myButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>通配符选择器（Universal Selector）：使用&quot;*&quot;作为选择器，会匹配所有部件。例如，你可以使用通配符选择器为所有部件设置默认样式：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>父子选择器（Parent-Child Selector）：使用空格分隔父控件和子控件，用于选择特定的控件层级关系。例如，下面的代码将为QFrame下所有QPushButton应用样式：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QFrame QPushButton {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>请注意，父子选择器可以嵌套使用，以指定更具体的层级关系。</p><ol start="5"><li>伪状态选择器（Pseudo-State Selector）：用于指定控件的伪状态，例如“hover”（鼠标悬停）和“checked”（选中）等。使用冒号&quot;:&quot;后跟伪状态名称。例如，下面的代码将为鼠标悬停在QPushButton上时应用的样式（改变背景色）：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QPushButton</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这些是QSS选择器的一些常见用法。你还可以结合使用多个选择器来更精确地指定应该应用样式的部件。希望这些信息能够帮到你！如果有进一步的问题，请随时提问。</p><h1 id="添加图片" tabindex="-1">添加图片 <a class="header-anchor" href="#添加图片" aria-label="Permalink to &quot;添加图片&quot;">​</a></h1><p>要给一个widget类添加背景图片，可以按照以下步骤进行操作：</p><ol><li><p>首先，保证Qt开发环境已经正确安装并设置好。</p></li><li><p>在widget类的头文件中引入QPixmap和QPalette类的头文件：</p></li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;QPixmap&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;QPalette&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>在widget类的构造函数或者初始化函数中，创建一个QPixmap对象并加载需要设置为背景图片的图片文件：</li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QPixmap</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pixmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:/path/to/image.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中<code>&quot;:/path/to/image.png&quot;</code>是图片文件的路径，可以是相对路径或绝对路径，也可以在Qt资源文件中使用<code>qrc</code>前缀来引用。</p><ol start="4"><li>创建一个QPalette对象，并使用QPalette的<code>setBrush()</code>函数将QPixmap对象设置为背景的画刷：</li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QPalette palette;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">palette.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backgroundRole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pixmap));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里的<code>this</code>表示当前的widget类对象，也可以指定其他需要设置背景的widget对象。</p><ol start="5"><li>最后，使用widget类的<code>setPalette()</code>函数将QPalette对象应用到widget对象上：</li></ol><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPalette</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(palette);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者使用widget类的<code>setAutoFillBackground(true);</code>函数开启自动填充背景颜色：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAutoFillBackground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，背景图片就成功地添加到了widget类中。</p><p>请注意，为了使背景图片适应widget的大小，可以根据需要调整QPixmap对象的大小或者在widget类的<code>resizeEvent()</code>函数中动态调整背景图片的大小。</p><h1 id="qcheckbox" tabindex="-1">QCheckBox <a class="header-anchor" href="#qcheckbox" aria-label="Permalink to &quot;QCheckBox&quot;">​</a></h1><p>在 Qt 中，可以使用 QSS（Qt Style Sheets）来定义界面控件的样式，包括 QCheckBox（复选框）。下面是一些常用的 QSS 属性，可以用于定制 QCheckBox 的样式：</p><ol><li><code>color</code>: 设置复选框文本的颜色。</li><li><code>background-color</code>: 设置复选框的背景颜色。</li><li><code>border</code>: 设置复选框的边框样式。可以包括宽度、颜色和样式，比如 <code>border: 1px solid black;</code>。</li><li><code>padding</code>: 设置复选框内容的填充大小，比如 <code>padding: 2px;</code>。</li><li><code>spacing</code>: 设置复选框文本和图标之间的间距，比如 <code>spacing: 4px;</code>。</li><li><code>font</code>: 设置复选框文本的字体样式，比如 <code>font: italic 12px &quot;Arial&quot;;</code>。</li><li><code>icon</code>: 设置复选框的图标，可以使用图片或者内置图标。可以通过 <code>icon-size</code> 属性来调整图标的大小。</li></ol><p>下面是一个例子，展示如何使用 QSS 来自定义 QCheckBox 的样式：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QString qss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;QCheckBox {&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    color: red;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    background-color: lightgray;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    border: 1px solid black;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    padding: 2px;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    spacing: 4px;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    font: italic 12px &#39;Arial&#39;;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;QCheckBox::indicator {&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    width: 12px;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    height: 12px;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    border: 1px solid black;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;QCheckBox::indicator:checked {&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;    image: url(checked.png);&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QCheckBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checkBox </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QCheckBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My CheckBox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">checkBox-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStyleSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qss);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在上面的例子中，我们使用 QSS 定义了 QCheckBox 的样式。QCheckBox 的文本颜色设置为红色，背景颜色为浅灰色，边框宽度为1像素且颜色为黑色，填充大小为2像素，文本和图标之间的间距为4像素，文本字体样式为斜体，大小为12像素，字体为Arial。同时，我们定义了复选框的指示器（indicator）的样式，指示器的大小是12像素，边框颜色为黑色。当复选框被选中时，我们设置了一个自定义的图标（checked.png）。最后，通过调用 <code>setStyleSheet</code> 方法将定义好的 QSS 应用于 QCheckBox 控件。</p><p>这是一个简单的例子，你可以根据需要进一步定制 QCheckBox 的样式，包括各种状态下的样式变化。希望这些信息能对你有所帮助！</p><h1 id="qpushbutton" tabindex="-1">QPushButton <a class="header-anchor" href="#qpushbutton" aria-label="Permalink to &quot;QPushButton&quot;">​</a></h1><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>QPushButton {</span></span>\n<span class="line"><span>    background-color: red;  /* 设置按钮的背景颜色为红色 */</span></span>\n<span class="line"><span>    color: white;           /* 设置按钮的文本颜色为白色 */</span></span>\n<span class="line"><span>    font-size: 16px;        /* 设置按钮文本的字体大小为16像素 */</span></span>\n<span class="line"><span>    border: 2px solid blue; /* 设置按钮的边框为蓝色实线，宽度为2像素 */</span></span>\n<span class="line"><span>    border-radius: 5px;     /* 设置按钮的圆角半径为5像素 */</span></span>\n<span class="line"><span>    padding: 5px 10px;      /* 设置按钮内边距为5像素（垂直方向）和10像素（水平方向） */</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h1 id="qss如何修改qcombobox的样式" tabindex="-1">qss如何修改QComboBox的样式 <a class="header-anchor" href="#qss如何修改qcombobox的样式" aria-label="Permalink to &quot;qss如何修改QComboBox的样式&quot;">​</a></h1><p><img src="'+e+'" alt="image-20230808112338977"></p><p><img src="'+p+'" alt="image-20230808135712403"></p><p><img src="'+l+'" alt="image-20230808135733090"></p><p><img src="'+t+'" alt="image-20230808135743035"></p><p><img src="'+h+`" alt="image-20230808135757816"></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 未下拉时，QComboBox的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 边框 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 圆角 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 字体填衬 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normal</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> normal</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Microsoft YaHei&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉后，整个下拉窗体样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractItemView {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 选定项的虚框 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 整个下拉窗体的边框 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 整个下拉窗体的背景色 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    selection-background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 整个下拉窗体被选中项的背景色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉后，整个下拉窗体每项的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractItemView::item {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 项的高度（设置pComboBox-&gt;setView(new QListView());后，该项才起作用） */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉后，整个下拉窗体越过每项的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractItemView::item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#FFFFFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 整个下拉窗体越过每项的背景色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉后，整个下拉窗体被选择的每项的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractItemView::item:selected {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#FFFFFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* QComboBox中的垂直滚动条 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractScrollArea QScrollBar:vertical {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#d0d2d4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 空白区域的背景色*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractScrollArea QScrollBar::handle:vertical {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 圆角 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 小方块的背景色深灰lightblue */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractScrollArea QScrollBar::handle:vertical</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">91</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 越过小方块的背景色yellow */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为可编辑（setEditable(true)）editable时，编辑区域的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox:editable {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为非编辑（setEditable(false)）!editable时，整个QComboBox的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox:!editable {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为可编辑editable时，点击整个QComboBox的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox:editable:on {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为非编辑!editable时，点击整个QComboBox的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox:!editable:on {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为可编辑editable时，下拉框的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:editable {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为可编辑editable时，点击下拉框的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:editable:on {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为非编辑!editable时，下拉框的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:!editable {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置为非编辑!editable时，点击下拉框的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:!editable:on {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 点击QComboBox */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox:on {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    subcontrol-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 子控件在父元素中的原点矩形。如果未指定此属性，则默认为padding。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    subcontrol-position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">top</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的位置（右上） */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的宽度 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-left-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的左边界线宽度 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-left-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">darkgray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的左边界线颜色 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-left-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的左边界线为实线 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-top-right-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 下拉框的右上边界线的圆角半径（应和整个QComboBox右上边界线的圆角半径一致） */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-bottom-right-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 同上 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}　/* 越过下拉框样式 */　QComboBox::drop-down:hover {　　　background: yellow;　}/* 下拉箭头样式 */ QComboBox::down-arrow {　　width: 15px; /* 下拉箭头的宽度（建议与下拉框drop-down的宽度一致） */ 　　background: transparent; /* 下拉箭头的的背景色 */ 　　padding: 0px 0px 0px 0px; /* 上内边距、右内边距、下内边距、左内边距 */　　image: url(:/images/combobox_arrow_down.png); } /* 点击下拉箭头 */ QComboBox::down-arrow:on { 　　image: url(:/images/combobox_arrow_up.png); /* 显示上拉箭头 */ } 注意：int main(){　　QComboBox* pComboBox = new QComboBox(this);　　pComboBox-&gt;setView(new QListView());   //添加这句，设置下拉列表项高才能生效}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br></div></div><p>当使用C++编程语言和Qt框架来开发应用程序时，可以使用QSS（Qt样式表）来修改QComboBox（下拉列表框）的样式。QSS是一种基于CSS的语言，用于定义Qt控件的外观和行为。下面是一些可以修改QComboBox样式的常见属性：</p><ol><li><p>修改下拉按钮的样式： 使用<code>QComboBox::down-arrow</code>选择器可以修改下拉按钮的样式。例如，设置按钮的背景颜色为红色：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QComboBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::down</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arrow {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: red;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   </span></span>
<span class="line"><span>1. 修改下拉列表的样式：</span></span>
<span class="line"><span>   使用\`QComboBox::drop-down\`选择器可以修改下拉列表的样式。例如，设置列表的背景颜色为蓝色：</span></span>
<span class="line"><span>   \`\`\`cpp</span></span>
<span class="line"><span>   QComboBox::drop-down {</span></span>
<span class="line"><span>       background-color: blue;</span></span>
<span class="line"><span>   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li><p>修改选中条目的样式： 使用<code>QComboBox QAbstractItemView</code>选择器可以修改下拉列表中选中条目的样式。例如，设置选中条目的背景颜色为绿色：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox QAbstractItemView {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    selection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: green;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>修改下拉列表中的条目样式： 使用<code>QComboBox QAbstractItemView::item</code>选择器可以修改下拉列表中的条目样式。例如，设置条目的字体颜色为白色：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QAbstractItemView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::item {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: white;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>修改下拉列表中鼠标悬停的条目样式： 使用<code>QComboBox QAbstractItemView::item:hover</code>选择器可以修改下拉列表中鼠标悬停的条目样式。例如，设置鼠标悬停条目的背景颜色为黄色：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QComboBox </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QAbstractItemView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::item:hover {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: yellow;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>以上只是QComboBox样式修改的一些简单示例，你可以根据自己的需求进一步自定义，例如修改字体、边框等。可以将上述样式表应用于QComboBox，通过调用<code>QComboBox::setStyleSheet</code>方法将样式表字符串传递给QComboBox对象即可。</p><p><img src="`+r+'" alt="image-20230808094142364"></p><p><img src="'+k+`" alt="image-20230808095116779"></p><h1 id="修改标题" tabindex="-1">修改标题 <a class="header-anchor" href="#修改标题" aria-label="Permalink to &quot;修改标题&quot;">​</a></h1><p>在 Qt 中，你可以使用 <code>QWidget::setWindowTitle()</code> 方法来设置窗口的标题。这个方法接受一个字符串参数，用于指定标题的文本。例如，你可以这样设置窗口的标题：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widget-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setWindowTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Window Title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想设置窗口的标题图标，可以使用 <code>QWidget::setWindowIcon()</code> 方法。这个方法接受一个 <code>QIcon</code> 对象作为参数，用于设置窗口的图标。<code>QIcon</code> 类提供了多种创建图标的方式，例如从文件、资源或 QPixmap 中创建。以下是一个使用文件路径创建图标的示例：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QIcon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widget-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setWindowIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icon);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>请确保在设置图标之前已经创建了窗口对象 <code>widget</code>。</p><p>如果你想在 Qt Designer 中设置窗口的标题或图标，可以按照以下步骤进行操作：</p><ol><li>选中窗口控件。</li><li>在属性编辑器中找到 &quot;windowTitle&quot; 属性，并设置所需的标题文本。</li><li>在属性编辑器中找到 &quot;windowIcon&quot; 属性，并设置所需的图标。</li></ol><p>希望这个回答对你有帮助。如果还有其他问题，请随时提问！</p><h1 id="setwindow相关api" tabindex="-1">setWindow相关api <a class="header-anchor" href="#setwindow相关api" aria-label="Permalink to &quot;setWindow相关api&quot;">​</a></h1><p>下面是和 <code>QWidget</code> 类或其子类相关的一些常用的 API 方法，用于设置窗口的属性和特性：</p><ol><li><code>QWidget::setWindowTitle(const QString&amp; title)</code>：设置窗口的标题。</li><li><code>QWidget::setWindowIcon(const QIcon&amp; icon)</code>：设置窗口的图标。</li><li><code>QWidget::setWindowFlags(Qt::WindowFlags flags)</code>：设置窗口的标志和行为。<code>Qt::WindowFlags</code> 参数可以指定窗口的类型、标题栏的显示方式、是否可调整大小等。常见的标志有：<code>Qt::Window</code>、<code>Qt::Dialog</code>、<code>Qt::Tool</code>、<code>Qt::WindowTitleHint</code>、<code>Qt::WindowCloseButtonHint</code> 等。</li><li><code>QWidget::setWindowModality(Qt::WindowModality modality)</code>：设置窗口的模态模式。可以设置为 <code>Qt::NonModal</code>（非模态）、<code>Qt::WindowModal</code>（应用程序模态）或 <code>Qt::ApplicationModal</code>（系统模态），以决定窗口是否接受用户输入。</li><li><code>QWidget::setWindowState(Qt::WindowState state)</code>：设置窗口的状态，例如最大化、最小化、激活等。</li><li><code>QWidget::setFixedSize(int width, int height)</code> 或 <code>QWidget::setFixedSize(const QSize&amp; size)</code>：设置窗口的固定尺寸，禁止用户调整大小。</li><li><code>QWidget::setWindowOpacity(qreal opacity)</code>：设置窗口的不透明度，接受一个介于 0.0（完全透明）和 1.0（完全不透明）之间的浮点数。</li><li><code>QWidget::setAttribute(Qt::WidgetAttribute attribute, bool on)</code>：设置窗口的属性。<code>Qt::WidgetAttribute</code> 参数可用于指定窗口的一些特殊行为，例如是否接受焦点、是否支持透明等。常见的属性有：<code>Qt::WA_DeleteOnClose</code>、<code>Qt::WA_ShowModal</code>、<code>Qt::WA_ShowWithoutActivating</code> 等。</li></ol><p>这些方法可以通过调用窗口对象（<code>QWidget</code> 或其子类的实例）的方式来使用。请注意，有些属性可能只对顶级窗口（例如 <code>QMainWindow</code>）有效。</p><h1 id="给widget设置图片背景" tabindex="-1">给widget设置图片背景 <a class="header-anchor" href="#给widget设置图片背景" aria-label="Permalink to &quot;给widget设置图片背景&quot;">​</a></h1><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url(:/images/background</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: center;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-attachment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: fixed;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">当使用QSS设置背景图片时，\`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`属性用于指定背景图片的重复方式。下面是\`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`属性的详细说明：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: repeat;\`：背景图片在水平和垂直方向上都会以平铺方式进行重复。当widget的尺寸小于背景图片的尺寸时，图片会被裁剪以适应widget的大小。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;\`：背景图片在水平和垂直方向上不会重复。图片将以其原始尺寸完整地显示在widget的背景中心。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">repeat-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;\`：背景图片会在水平方向上以平铺方式进行重复，而在垂直方向上不重复。这意味着图片会沿widget的宽度重复。当widget的高度小于背景图片的高度时，图片会被裁剪以适应widget的高度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">repeat-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;\`：背景图片会在垂直方向上以平铺方式进行重复，而在水平方向上不重复。这意味着图片会沿widget的高度重复。当widget的宽度小于背景图片的宽度时，图片会被裁剪以适应widget的宽度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">另外，QSS中的\`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`属性还可以使用以下两个值，实现更复杂的背景图片重复效果：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: space;\`：背景图片会以平铺方式进行重复，直到占满整个widget的背景区域。如果图片大小无法整除widget的大小，那么会在图片之间添加间隔，以填充剩余的空间。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">6. \`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: round;\`：背景图片会以平铺方式进行重复，并将图片按比例调整，以填充整个widget的背景区域。如果图片大小无法整除widget的大小，那么图片会被缩放以适应。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">通过调整\`</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`属性的值，你可以自定义背景图片在widget中的重复方式。根据你的需求，选择适合的值即可达到你想要的视觉效果。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">希望以上解答对你有帮助！如果你还有其他问题，请随时提问。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,144),c=[o];function b(E,g,u,m,y,C){return a(),i("div",null,c)}const Q=s(d,[["render",b]]);export{B as __pageData,Q as default};

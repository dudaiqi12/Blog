import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.Bt9cqVig.js";const b=JSON.parse('{"title":"CmakeList.txt","description":"","frontmatter":{},"headers":[],"relativePath":"C++/基础demo/CmakeList.txt.md","filePath":"C++/基础demo/CmakeList.txt.md"}'),l={name:"C++/基础demo/CmakeList.txt.md"},e=n(`<h1 id="cmakelist-txt" tabindex="-1">CmakeList.txt <a class="header-anchor" href="#cmakelist-txt" aria-label="Permalink to &quot;CmakeList.txt&quot;">​</a></h1><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p>在CMake中，CMakeLists.txt文件通常用于定义项目的构建规则和设置。这个文件中可以声明和使用各种变量来管理项目的编译和构建过程。以下是一些常见的CMakeList文件中可能会使用的变量：</p><ol><li><code>CMAKE_SOURCE_DIR</code>：指向源代码根目录的路径。</li><li><code>CMAKE_BINARY_DIR</code>：指向构建目录的路径。</li><li><code>CMAKE_CURRENT_SOURCE_DIR</code>：指向当前处理的CMakeLists.txt所在的目录。</li><li><code>CMAKE_CURRENT_BINARY_DIR</code>：指向与当前处理的CMakeLists.txt对应的构建目录。</li><li><code>CMAKE_CURRENT_LIST_FILE</code>：当前处理的CMakeLists.txt的完整路径。</li><li><code>CMAKE_CURRENT_LIST_DIR</code>：当前处理的CMakeLists.txt所在的目录的完整路径。</li><li><code>PROJECT_NAME</code>：用于设置项目的名称。</li><li><code>PROJECT_SOURCE_DIR</code>：指向项目源代码根目录的路径。</li></ol><p>这些变量是CMake内置的，可以在CMakeLists.txt文件中直接引用，例如：</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Source directory: \${CMAKE_SOURCE_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Build directory: \${CMAKE_BINARY_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current source directory: \${CMAKE_CURRENT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current build directory: \${CMAKE_CURRENT_BINARY_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current list file: \${CMAKE_CURRENT_LIST_FILE}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current list directory: \${CMAKE_CURRENT_LIST_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project name: \${PROJECT_NAME}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project source directory: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这些变量可以用于打印路径、设置目录、配置输出等等。请注意，这只是一些常见的变量，并不是所有可能用到的变量。实际上，您可以在CMakeLists.txt文件中定义自己的变量来满足特定需求。</p><h3 id="常用宏" tabindex="-1">常用宏 <a class="header-anchor" href="#常用宏" aria-label="Permalink to &quot;常用宏&quot;">​</a></h3><ol><li><code>project</code> 这个宏用于设置项目的名称和版本。它可以接收两个参数，第一个参数是项目的名称，第二个参数是项目的版本号。</li><li><code>add_executable</code> 这个宏用于将源代码文件编译成可执行文件。它接收两个参数，第一个参数是生成的可执行文件的名称，第二个参数是源代码文件的路径。</li><li><code>add_library</code> 这个宏用于将源代码文件编译成静态库或共享库。它接收两个参数，第一个参数是生成的库文件的名称，第二个参数是源代码文件的路径。</li><li><code>target_link_libraries</code> 这个宏用于将库文件链接到可执行文件中。它接收两个参数，第一个参数是可执行文件的名称，第二个参数是需要链接的库文件的名称。</li><li><code>include_directories</code> 这个宏用于添加头文件搜索路径。它接收一个参数，参数是头文件搜索路径的路径。</li><li><code>find_package</code> 这个宏用于查找指定的外部库。它接收一个参数，参数是要查找的外部库的名称。</li><li><code>set</code> 这个宏用于设置变量的值。它接收两个参数，第一个参数是变量的名称，第二个参数是变量的值。</li><li><code>add_definitions</code> 这个宏用于添加编译选项。它接收一个参数，参数是要添加的编译选项。</li><li><code>if</code>指令：这个指令用于基于条件执行一系列命令。可以使用if命令根据不同的情况设置编译选项或条件编译的开关。</li><li><code>foreach</code>指令：这个指令用于遍历一个列表，并执行相应的命令。</li><li><code>add_executable</code>或<code>add_library</code>指令：这些指令用于添加可执行文件或库文件到项目中。</li><li><code>target_include_directories</code>指令：这个指令用于指定编译目标的头文件搜索路径。</li><li><code>cmake_minimum_required</code>指令：这个指令用于指定所需的CMake的版本。</li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.5)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPage LANGUAGES CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_INCLUDE_CURRENT_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_AUTOUIC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_AUTOMOC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_AUTORCC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 11)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># QtCreator supports the following variables for Android, which are identical to qmake Android variables.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check http://doc.qt.io/qt-5/deployment-android.html for more information.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># They need to be set before the find_package(Qt5 ...) call.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#if(ANDROID)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    set(ANDROID_PACKAGE_SOURCE_DIR &quot;\${CMAKE_CURRENT_SOURCE_DIR}/android&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    if (ANDROID_ABI STREQUAL &quot;armeabi-v7a&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#        set(ANDROID_EXTRA_LIBS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#            \${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#            \${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    endif()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#endif()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Qt5 COMPONENTS Widgets REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ANDROID)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPage SHARED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.ui</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainwindow.ui</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginPage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Qt5::Widgets)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="导入静态库" tabindex="-1">导入静态库 <a class="header-anchor" href="#导入静态库" aria-label="Permalink to &quot;导入静态库&quot;">​</a></h3><p>导入时候有.a文件和.h文件</p><p>您好！有关cmake导入静态库的问题，以下是详细的回答：</p><ol><li>首先，在CMakeLists.txt文件中，添加以下几行代码：</li></ol><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置项目名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(YourProjectName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置编译器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 11)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加可执行文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(YourExecutable your_source_files.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加库文件搜索路径 .a文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">link_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/libs)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加头文件搜索路径 .h文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${CMAKE_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/libs/include)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加需要链接的静态库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(YourExecutable YourLibraryName)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="2"><li><p>确保您的.a文件和.h文件位于正确的目录中。一般来说，您可以将.a文件放入一个名为lib的文件夹中，将.h文件放入一个名为include的文件夹中。</p></li><li><p>修改上述代码中的&quot;YourProjectName&quot;为您的项目名称，&quot;YourExecutable&quot;为您的可执行文件名称，&quot;your_source_files.cpp&quot;为您的源代码文件名，&quot;YourLibraryName&quot;为您要链接的静态库名称。</p></li><li><p>确保您的CMakeLists.txt文件和源代码文件位于同一目录下。</p></li><li><p>打开终端，进入您的项目目录，执行以下命令编译项目：</p></li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="6"><li>如果一切顺利，编译过程应该成功，并生成可执行文件。您可以在build文件夹中找到生成的可执行文件。</li></ol>`,19),p=[e];function t(h,r,k,d,c,E){return i(),a("div",null,p)}const u=s(l,[["render",t]]);export{b as __pageData,u as default};
